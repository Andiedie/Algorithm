import java.util.ArrayList;

/**
 * 把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。
 * 例如 6、8 都是丑数，但 14 不是，因为它包含质因子 7。习惯上我们把 1 当做是第一个丑数。
 * 求按从小到大的顺序的第 N 个丑数。
 *
 * 首先从丑数的定义我们知道，一个丑数的因子只有 2,3,5，那么丑数 p = 2 ^ x * 3 ^ y * 5 ^ z
 * 换句话说一个丑数一定由另一个丑数乘以 2 或者乘以 3 或者乘以 5 得到
 * 那么我们从 1 开始乘以 2,3,5，就得到 2,3,5 三个丑数，在从这三个丑数出发乘以 2,3,5
 * 就得到 4,6,10  6,9,15  10,15,25 九个丑数
 * 我们发现这种方法会得到重复的丑数而且我们题目要求第 N 个丑数，这样的方法得到的丑数也是无序的。
 *
 * 那么我们可以维护三个队列：
 * （1）丑数数组： 1
 * 乘以 2 的队列：2
 * 乘以 3 的队列：3
 * 乘以 5 的队列：5
 * 选择三个队列头最小的数 2 加入丑数数组，同时将该最小的数乘以 2,3,5 放入三个队列；
 * （2）丑数数组：1,2
 * 乘以 2 的队列：4
 * 乘以 3 的队列：3，6
 * 乘以 5 的队列：5，10
 * 选择三个队列头最小的数 3 加入丑数数组，同时将该最小的数乘以 2,3,5 放入三个队列；
 * （3）丑数数组：1,2,3
 * 乘以 2 的队列：4,6
 * 乘以 3 的队列：6,9
 * 乘以 5 的队列：5,10,15
 * 选择三个队列头里最小的数 4 加入丑数数组，同时将该最小的数乘以 2,3,5 放入三个队列；
 * （4）丑数数组：1,2,3,4
 * 乘以 2 的队列：6，8
 * 乘以 3 的队列：6,9,12
 * 乘以 5 的队列：5,10,15,20
 * 选择三个队列头里最小的数 5 加入丑数数组，同时将该最小的数乘以 2,3,5 放入三个队列；
 * （5）丑数数组：1,2,3,4,5
 * 乘以 2 的队列：6,8,10，
 * 乘以 3 的队列：6,9,12,15
 * 乘以 5 的队列：10,15,20,25
 * 选择三个队列头里最小的数 6 加入丑数数组，但我们发现，有两个队列头都为 6，所以我们弹出两个队列头，同时将 12,18,30 放入三个队列；
 *
 * 实现思路：
 * 我们没有必要维护三个队列，只需要记录三个指针显示到达哪一步
 */

class Solution {
    public int GetUglyNumber_Solution(int index) {
        if (index < 7)
            return index;
        int p2 = 0, p3 = 0, p5 = 0, newNum = 1;
        ArrayList<Integer> arr = new ArrayList<>();
        arr.add(newNum);
        while (arr.size() < index) {
            newNum = Math.min(arr.get(p2) * 2, Math.min(arr.get(p3) * 3, arr.get(p5) * 5));
            if (arr.get(p2) * 2 == newNum)
                p2++;
            if (arr.get(p3) * 3 == newNum)
                p3++;
            if (arr.get(p5) * 5 == newNum)
                p5++;
            arr.add(newNum);
        }
        return newNum;
    }
}
