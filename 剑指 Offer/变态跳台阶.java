/**
 * 准备跳向第 n 个台阶的时候，共有 n 种跳法
 * 从第 n - 1 跳上来，共有 f(n - 1)种情况
 * 从第 n - 2 跳上来，共有 f(n - 2)种情况
 * ...
 * 从第 1 跳上来，共有 f(1)种情况
 * 从第 0 跳上来，共有 f(0)种情况
 * 
 * 则有 f(n) = f(n - 1) + f(n - 2) + ... + f(1) + f(0)
 * 
 * 其中 f(1) 是跳上一层台阶的跳法，等于 1
 * f(0) 是不跳台阶的跳法，等于 1（即只有一种方法，就是不跳）
 * 
 * 同理 f(n - 1) = f(n - 2) + ... + f(1) + f(0)
 * 
 * f(n) - f(n - 1) = f(n - 1)
 * 所以 f(n) = 2 * f(n - 2)
 * 
 * 所以 f(n) = 2^(n - 1)
 */
class Solution {
    public int JumpFloorII(int target) {
        return (int) Math.pow(2, target - 1);
    }
}
